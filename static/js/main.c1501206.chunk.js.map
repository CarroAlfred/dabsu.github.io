{"version":3,"sources":["assets/images/avatar.png","assets/images/avatar-sm.png","context/theme/ThemeContext.tsx","components/AboutMe/AboutMe.tsx","components/Banner/Banner.tsx","components/Header/Header.tsx","components/Home/Home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","ThemeContext","React","createContext","ThemeProvider","children","useState","theme","setTheme","color","backgroundColor","document","body","style","Provider","value","toggleTheme","useStyles","makeStyles","createStyles","root","display","margin","spacing","small","width","height","large","AboutMe","classes","Grid","container","id","justify","alignItems","alignContent","item","lg","className","Avatar","alt","src","avatar","Banner","Header","onClick","useContext","IconButton","edge","role","aria-label","Home","Fragment","pages","offset","speed","factor","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c1501206.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/avatar.8ad1d962.png\";","module.exports = __webpack_public_path__ + \"static/media/avatar-sm.2a907025.png\";","import React, { useState } from \"react\";\n\ntype Theme = \"light\" | \"dark\";\ntype ThemeContext = { theme: Theme; toggleTheme: () => void };\n\nexport const ThemeContext = React.createContext<ThemeContext>(\n  {} as ThemeContext\n);\n\nexport const ThemeProvider: React.FC = ({ children }) => {\n  const [theme, setTheme] = useState<Theme>(\"dark\");\n\n  const toggleTheme = () => {\n    setTheme(theme === \"dark\" ? \"light\" : \"dark\");\n  };\n\n  const color = theme === \"light\" ? \"#333\" : \"#FFF\";\n  const backgroundColor = theme === \"light\" ? \"#FFF\" : \"#333\";\n\n  document.body.style.color = color;\n  document.body.style.backgroundColor = backgroundColor;\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};","import \"./AboutMe.scss\";\n\nimport { Avatar, Card, CardContent, createStyles, Grid, makeStyles, Theme } from \"@material-ui/core\";\nimport React from \"react\";\n\nimport avatar from \"../../assets/images/avatar.png\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n      '& > *': {\n        margin: theme.spacing(1)\n      }\n    },\n    small: {\n      width: theme.spacing(3),\n      height: theme.spacing(3)\n    },\n    large: {\n      width: theme.spacing(20),\n      height: theme.spacing(20)\n    }\n  })\n);\nexport const AboutMe = () => {\n  const classes = useStyles();\n  return (\n    <Grid\n      container\n      id=\"about-me\"\n      justify=\"center\"\n      alignItems=\"center\"\n      alignContent=\"center\"\n    >\n      <Grid item lg={5}>\n        <div className=\"avatar\">\n          <Avatar alt=\"alfred avatar\" src={avatar} className={classes.large} />\n        </div>\n        <div className=\"intro\">Hi.</div>\n        <div className=\"about-me-msg\">\n          I'm a Software Engineer based in Manila, Philippines.\n          <div>I like to play with design challenges on dribble, and</div>\n          <div>I enjoy making web pages responsive.</div>\n        </div>\n      </Grid>\n    </Grid>\n  );\n};\n","import \"./Banner.scss\";\n\nimport React from \"react\";\n\nexport const Banner = () => {\n  return (\n    <div className=\"banner\">\n      <div className=\"banner-wrapper\">\n        <div className=\"sm-title\">I am</div>\n        <div className=\"banner-title\">\n          <span>Alfred Carro</span>\n        </div>\n        <div className=\"md-title\">Software Engineer</div>\n      </div>\n    </div>\n  );\n};\n","import \"./Header.scss\";\n\nimport { AppBar, Avatar, Button, Container, IconButton, Toolbar } from \"@material-ui/core\";\nimport React, { useContext } from \"react\";\n\nimport avatar from \"../../assets/images/avatar-sm.png\";\nimport { ThemeContext } from \"../../context/theme/ThemeContext\";\n\ninterface Props {\n  onClick: (e: any) => void;\n}\nexport const Header = ({ onClick }: Props) => {\n  const { theme } = useContext(ThemeContext);\n  return (\n    <div className=\"header\">\n      <div>\n        <IconButton edge=\"start\">\n          <Avatar src={avatar} />{' '}\n          <span className=\"initials\">theAlfredCarro</span>\n        </IconButton>\n      </div>\n      <div>\n        <IconButton edge=\"end\" onClick={onClick}>\n          {theme === 'dark' ? (\n            <span role=\"img\" aria-label=\"light\">\n              üåû\n            </span>\n          ) : (\n            <span role=\"img\" aria-label=\"dark\">\n              üåù\n            </span>\n          )}\n        </IconButton>\n      </div>\n    </div>\n  );\n};\n","import { AppBar, Button, IconButton, Toolbar, Typography } from \"@material-ui/core\";\nimport React, { useContext } from \"react\";\nimport { Parallax, ParallaxLayer } from \"react-spring/renderprops-addons\";\n\nimport { ThemeContext } from \"../../context/theme/ThemeContext\";\nimport { AboutMe } from \"../AboutMe/AboutMe\";\nimport { Banner } from \"../Banner/Banner\";\nimport { Header } from \"../Header/Header\";\n\nexport const Home = () => {\n  const { toggleTheme } = useContext(ThemeContext);\n\n  return (\n    <React.Fragment>\n      <div id=\"public\">\n        <Parallax pages={2}>\n          <ParallaxLayer offset={1} speed={1} />\n          <Header onClick={toggleTheme} />\n          <ParallaxLayer factor={1} offset={0.2} speed={1}>\n            <Banner />\n          </ParallaxLayer>\n\n          <ParallaxLayer factor={0.5} offset={0.9} speed={1.5}>\n            <AboutMe />\n          </ParallaxLayer>\n        </Parallax>\n      </div>\n    </React.Fragment>\n  );\n};\n","import \"./App.css\";\n\nimport React from \"react\";\n\nimport { Home } from \"./components/Home/Home\";\nimport { ThemeProvider } from \"./context/theme/ThemeContext\";\n\n\n\n\nfunction App() {\n  return (\n    <ThemeProvider>\n      <Home />\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}